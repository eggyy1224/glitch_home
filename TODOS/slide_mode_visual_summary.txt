╔════════════════════════════════════════════════════════════════════════════╗
║                    SLIDE MODE 播放順序詳細分析                               ║
╚════════════════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 兩種模式快速對比
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────┬───────────────────┬─────────────────────┐
│ 特性                             │ Vector Mode       │ Kinship Mode        │
├─────────────────────────────────┼───────────────────┼─────────────────────┤
│ 名稱                             │ 向量相似度搜尋     │ 親緣關係遍歷         │
│ URL 參數                         │ slide_source=     │ slide_source=       │
│                                 │ vector (預設)     │ kinship             │
│ 數據來源                         │ Chroma VectorDB   │ Metadata JSON       │
│ 排序依據                         │ Cosine距離        │ 親緣優先級           │
│ 查詢速度                         │ ⚡ 快             │ 🐌 中等             │
│ 結果穩定性                       │ ⭐⭐⭐ 高           │ ⭐⭐⭐⭐ 非常高        │
│ 視覺連貫性                       │ ⭐⭐⭐⭐ 很高       │ ⭐⭐⭐ 中等           │
│ 探索深度                         │ ⭐⭐⭐⭐⭐ 無限制   │ ⭐⭐⭐ 受限於族譜      │
│ 最適用於                         │ 藝術探索           │ 歷史追溯             │
└─────────────────────────────────┴───────────────────┴─────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 VECTOR MODE 播放順序流程圖
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                           使用者點擊圖像 A
                                 │
                                 ▼
                    URL: ?mode=slide&img=A.png
                                 │
                                 ▼
                  前端 SlideMode.jsx 接收參數
                                 │
                                 ▼
                    performSearch(A, generation, vector)
                                 │
                                 ▼
                  ┌─────────────────────────────────┐
                  │   searchImagesByImage()          │
                  │   送往後端 API                    │
                  │   /api/search/image              │
                  └─────────────────────────────────┘
                                 │
                                 ▼
             ┌──────────────────────────────────────┐
             │ 後端 vector_store.search_images_by_image()  │
             ├──────────────────────────────────────┤
             │ 1. 檢查 A 是否在 VectorDB 中            │
             │    - 如果存在 → 取出向量                │
             │    - 如果不存在 → 計算 embedding        │
             │ 2. 用該向量在 Chroma 中查詢             │
             │ 3. 返回 top 15 相似度最近的圖像         │
             │    (cosine distance 遞增)             │
             └──────────────────────────────────────┘
                                 │
                                 ▼
                        API 返回結果 (JSON)
                ┌────────────────────────────────┐
                │ {                              │
                │   results: [                   │
                │     {id: A1, distance: 0.05},  │
                │     {id: A2, distance: 0.08},  │
                │     {id: A3, distance: 0.11},  │
                │     ... (共15個)                │
                │   ]                            │
                │ }                              │
                └────────────────────────────────┘
                                 │
                                 ▼
                 前端接收 → prepared[] 陣列
                          (按相似度排列)
                                 │
                ┌────────────────┴────────────────┐
                │ DISPLAY_ORDER 重排邏輯            │
                │ (實際上無作用!)                   │
                │ const DISPLAY_ORDER =           │
                │   [0,1,2,3,...,14]              │
                │ ⚠️ 只是保持原序！               │
                └────────────────┬────────────────┘
                                 │
                                 ▼
                        ordered[] = prepared[]
                                 │
                    ┌────────────┴────────────┐
                    │ 加入錨點圖像 (放最前)      │
                    │ ordered.unshift(A)      │
                    └────────────┬────────────┘
                                 │
                                 ▼
                    最終播放列表 (15-16 張)
                    [A, A1, A2, A3, ..., A15]
                                 │
                                 ▼
                        ⏱️ 自動循環播放
                        每 3000ms 換一張
                                 │
                   ┌─────────────┴─────────────┐
                   │ 播放進度 0 → 1 → 2 → ... → 15 │
                   │ (0秒) (3s) (6s) ... (45s) │
                   └─────────────┬─────────────┘
                                 │
                          當 index 超出範圍
                                 │
                    ┌────────────┴────────────┐
                    │ 循環完成！ (第15張 = A15)   │
                    │ 設定 A15 為新錨點           │
                    │ setGeneration(+1)       │
                    │ 重新搜尋 → 新播放列表      │
                    └────────────┬────────────┘
                                 │
                                 ▼
                    回到搜尋步驟，重複循環
                    
                    可能偏離初始圖像很遠！


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👨‍👩‍👧‍👦 KINSHIP MODE 播放順序流程圖
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                    使用者點擊圖像 X + kinship 模式
                                 │
                                 ▼
          URL: ?mode=slide&img=X.png&slide_source=kinship
                                 │
                                 ▼
                    performSearch(X, generation, kinship)
                                 │
                                 ▼
                          fetchKinship(X, -1)
                    (深度 -1 = 無限遞迴查詢)
                                 │
                                 ▼
              ┌──────────────────────────────────┐
              │  後端 api_kinship() 處理             │
              ├──────────────────────────────────┤
              │ 1. 載入所有 metadata/*.json       │
              │ 2. 找 X 的父母親                  │
              │ 3. 遞歸構建完整親族樹            │
              │ 4. 分類返回:                     │
              │    - children: X 的孩子           │
              │    - siblings: 同父母的兄妹      │
              │    - parents: X 的父母            │
              │    - ancestors_by_level: 按層級  │
              │    - ancestors: 所有祖先         │
              │    - related_images: 其他相關    │
              └──────────────────────────────────┘
                                 │
                                 ▼
                    API 返回親緣數據 (JSON)
                ┌─────────────────────────────┐
                │ {                           │
                │   original_image: "X.png",  │
                │   children: [               │
                │     "CHILD1.png",           │
                │     "CHILD2.png"            │
                │   ],                        │
                │   siblings: [               │
                │     "SIB1.png",             │
                │     "SIB2.png"              │
                │   ],                        │
                │   parents: [...],           │
                │   ancestors_by_level: [...],│
                │   ancestors: [...],         │
                │   related_images: [...]     │
                │ }                           │
                └─────────────────────────────┘
                                 │
                                 ▼
            前端接收 → 按優先級合併排序
                        (使用 pushList)
                                 │
            ┌───────────────────┬────────────────┐
            │                   │                │
        優先級 1            優先級 2-6         結果
        children (孩子)     siblings (兄妹)   ordered[]
            │                   │                │
            ▼                   ▼                ▼
         去重 (Set)         parents (父母)     [X, CHILD1, CHILD2,
            ▼                   ▼              SIB1, SIB2, PARENT,
         ordered.push()  ancestors_by_level   GRANDPA, ...]
            ▼                   ▼
         保證無重複      ancestors (祖先)
                            ▼
                        related_images
                            ▼
                    最終順序 (優先級高先)
                                 │
                                 ▼
                    最終播放列表 (最多15張)
            [X, CHILD1, CHILD2, SIB1, SIB2, PARENT, ...]
                                 │
                                 ▼
                        ⏱️ 自動循環播放
                        每 3000ms 換一張
                                 │
                   ┌─────────────┴─────────────┐
                   │ 播放進度 0 → 1 → 2 → ... → 14 │
                   │ (0秒) (3s) (6s) ... (42s) │
                   └─────────────┬─────────────┘
                                 │
                          當播完所有親屬
                                 │
                    ┌────────────┴────────────┐
                    │ 循環完成！ (最後一個親屬)  │
                    │ 設定為新錨點              │
                    │ 開始查詢新錨點的親屬      │
                    │ 可能跳到親族的另一分支    │
                    └────────────┬────────────┘
                                 │
                                 ▼
                        回到搜尋步驟，重複循環
                        
                        仍限制在親族範圍內


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎮 使用範例
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

例 1：向量搜尋模式 (預設)
├─ 點擊某個後代圖像
├─ URL: http://localhost:5173/?mode=slide&img=offspring_123.png
├─ 效果: 按視覺相似度循環展示 15 張相似圖像
└─ 用途: 探索視覺風格相近的作品集合

例 2：親緣關係模式
├─ 點擊某個後代圖像  
├─ URL: http://localhost:5173/?mode=slide&img=offspring_456.png&slide_source=kinship
├─ 效果: 按親族關係講述血脈故事
│       (孩子 → 兄妹 → 父母 → 祖先)
└─ 用途: 追溯生成歷史與演化過程

例 3：自定義播放速度
├─ 慢速 (5秒/張):
│  http://localhost:5173/?mode=slide&img=offspring_789.png&interval=5000
├─ 快速 (1秒/張):
│  http://localhost:5173/?mode=slide&img=offspring_789.png&interval=1000
└─ 用途: 調整觀看節奏

例 4：快捷鍵
├─ Ctrl + R: 切換字幕顯示 (顯示圖像名稱與位置)
└─ 格式: 3/15 · offspring_20250923_161624_066.png


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔍 發現的問題清單
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

問題 1: DISPLAY_ORDER 邏輯不明
  ⚠️ 當前: const DISPLAY_ORDER = [0,1,2,...,14]
  ❌ 結果: 相當於沒有重排，直接保持原序
  💡 推測: 可能原意想實現隨機順序或某種特殊排列？
  ✅ 建議: 明確需求或移除此無作用的邏輯

問題 2: 向量模式的"漂流"現象  
  ⚠️ 現象: 循環完成後，最後一張圖成為新錨點
  ❌ 結果: 可能越來越遠離初始圖像
  ✅ 建議: 提供"固定模式"(循環同一集合)或"重置模式"

問題 3: 缺少邊界條件處理
  ⚠️ Kinship 模式: 孤立圖像（無親屬）會怎樣？
  ❌ Vector 模式: 搜尋結果少於 3 張時？
  ✅ 建議: 增加 fallback 邏輯確保總有內容可播

問題 4: 性能考量
  ⚠️ 每次循環完成就要重新搜尋
  ❌ 可能造成不必要的 API 調用
  ✅ 建議: 預先加載下一批結果

問題 5: 去重邏輯中的優先級不可調
  ⚠️ Kinship 模式的優先級硬編碼
  ❌ 無法自定義 (如想先看祖先再看子代)
  ✅ 建議: 用參數化配置優先級


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📈 改進建議優先級
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔴 P0 (必做)
├─ 明確 DISPLAY_ORDER 的真實目的
├─ 處理搜尋結果少於預期的情況
└─ 驗證循環邏輯的可控性

🟠 P1 (重要)
├─ 加入"固定循環"選項 (不改變錨點)
├─ 預加載下一批搜尋結果
└─ 改進 Kinship 的邊界情況處理

🟡 P2 (優化)
├─ 實現結果多樣化 (混合相似度不同的結果)
├─ 可配置的優先級順序
└─ 性能監測與日誌

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

報告生成時間: 2025-10-20
分析對象: frontend/src/SlideMode.jsx
